type Address = u160;
type Amount = u248;
type Id = u64;

struct Invoice {
    id: Id,
    issuer: Address,
    payer: Address,
    amount: Amount,
    cancelled: bool
}

contract Invoices {
    invoices: std::collections::MTreeMap<Id, Invoice>;
    pub fn new() -> Self {
        Self {
            invoices: std::collections::MTreeMap
        }
    }

    pub fn raiseInvoice(mut self, invoiceId: Id, amount: Amount, issuer: Address, payer: Address) {
        self.invoices.insert(invoiceId, Invoice {id: invoiceId, issuer: issuer, payer: payer, amount: amount, cancelled: false});
    }

    pub fn getInvoice(self, invoiceId: Id) -> Invoice {
        let (value, exists) = self.invoices.get(invoiceId);
        value
    }
}

#[test]
fn test_create_contract() {
    require(2 + 2 == 4, "Math has to work");
}
